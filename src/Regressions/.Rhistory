msummary(list("PC" = myregression), output = "pc.png")
msummary(list("PC" = myregression), output = "pc.docx")
myregression <- lm(CPI ~ UNEMPLOY, data = philcurve)
# logregression <- lm(CPI ~ log(UNEMPLOY), data = philcurve)
# mreg <- lm(CPI ~ UNEMPLOY + log(UNEMPLOY), data = philcurve)
summary(myregression)
library(vars)
library(TensorEconometrics)
library(tensorTS, lib.loc = "/usr/lib/R/library")
library(tidyverse, lib.loc = "/usr/lib/R/library")
library(rTensor)
library(tidyr)
library(dplyr)
library(HDGCvar)
interestrate <- read_csv("~/Desktop/Projects/PHDYear1/TensorSCCF/data/longir.csv")
interestrate <- interestrate %>%
group_by(Location) %>%
mutate(Value = c(NA, diff(Value)))
dfir <- spread(interestrate, key = Location, value = Value)
# ts.plot(cbind(dfir$FRA, dfir$DEU))
ts.plot(dfir$USA)
acf(dfir$DEU, na.action = na.pass)
gdp_data <- read_csv("~/Desktop/Projects/PHDYear1/TensorSCCF/data/gdpextended.csv")
gdp_data <- gdp_data %>%
group_by(Location) %>%
mutate(Value = c(NA, diff(log(Value))))
dfgdp <- spread(gdp_data, key = Location, value = Value)
ts.plot(dfgdp$FRA)
acf(dfgdp$GBR, na.action = na.pass)
prod_data <- read_csv("~/Desktop/Projects/PHDYear1/TensorSCCF/data/prodextended.csv")
prod_data <- prod_data %>%
group_by(Location) %>%
mutate(Value = c(NA, diff(log(Value))))
dfprod <- spread(prod_data, key = Location, value = Value)
ts.plot(dfprod$FRA)
acf(dfprod$GBR, na.action = na.pass)
consumerprice <- read_csv("~/Desktop/Projects/PHDYear1/TensorSCCF/data/cpiextended.csv")
dfcpi <- spread(consumerprice, key = Location, value = Value)
dfcpipre <- dfcpi[,2:6]
yt <- embed(as.matrix(dfcpipre), 5)[,1:5]
yt4 <- embed(as.matrix(dfcpipre), 5)[,21:25]
newdfcpi <- log(yt) - log(yt4)
dfcpi <- data.frame(dfcpi$Period[5:116], newdfcpi)
colnames(dfcpi) <- c("Period", "CAN", "DEU", "FRA", "GBR", "USA")
ts.plot(dfcpi$USA)
acf(dfcpi$USA, na.action = na.pass)
matdata <- array(NA, dim = c(96, 4, 5))
matdata[,1,1] <- dfir$USA[21:116]
matdata[,1,2] <- dfir$CAN[21:116]
matdata[,1,3] <- dfir$DEU[21:116]
matdata[,1,4] <- dfir$FRA[21:116]
matdata[,1,5] <- dfir$GBR[21:116]
matdata[,2,1] <- dfgdp$USA[21:116]
matdata[,2,2] <- dfgdp$CAN[21:116]
matdata[,2,3] <- dfgdp$DEU[21:116]
matdata[,2,4] <- dfgdp$FRA[21:116]
matdata[,2,5] <- dfgdp$GBR[21:116]
matdata[,3,1] <- dfprod$USA[21:116]
matdata[,3,2] <- dfprod$CAN[21:116]
matdata[,3,3] <- dfprod$DEU[21:116]
matdata[,3,4] <- dfprod$FRA[21:116]
matdata[,3,5] <- dfprod$GBR[21:116]
matdata[,4,1] <- dfcpi$USA[17:112]
matdata[,4,2] <- dfcpi$CAN[17:112]
matdata[,4,3] <- dfcpi$DEU[17:112]
matdata[,4,4] <- dfcpi$FRA[17:112]
matdata[,4,5] <- dfcpi$GBR[17:112]
mplot(matdata)
save(matdata, file = "alainindcleandiffir.rda")
View(dfcpi)
?mplot
?lda
embed
ndims = 5
x = matrix(rnorm(100 * ndims), nrow = 100, ncol = ndims)
y = matrix(rnorm(100 * ndims), nrow = 100, ncol = ndims)
gamma_matrix = diag(5)
gamma_matrix
rank = 2
sqrt_matrix <- function(matr){
eigens <- eigen(matr)
vecs <- eigens[["vectors"]]
vals <- eigens[["values"]]
vecs %*% diag(sqrt(vals)) %*% t(vecs)
}
full_rank <- min(dim(x)[2], dim(y)[2])
cov_x <- cov(x) + k * diag(1, dim(x)[2])
k = 3
cov_x <- cov(x) + k * diag(1, dim(x)[2])
cov_x
cov(x)
k = 0
cov_x <- cov(x) + k * diag(1, dim(x)[2])
cov_x
t(x) %*% x
1/100 * (t(x) %*% x)
cov(x)
1/98 * (t(x) %*% x)
cov(x)
1/99 * (t(x) %*% x)
?cov
cov
C_cov
?C_cov
gamma_matrix
sqrtm <- sqrt_matrix(gamma_matrix)
sqrttm
sqrtm
inv(sqrtm)
solve(sqrtm)
cov_x <- cov(x) + k * diag(1, dim(x)[2])
cov_yx <- cov(y, x)
cov_y <- cov(y) + k * diag(1, dim(y)[2])
cov_xy <- t(cov_yx)
sqrtm <- sqrt_matrix(gamma_matrix)
weighted_matrix <- sqrtm %*%
cov_yx %*%
solve(cov_x) %*%
cov_xy %*%
sqrtm
eigens <- eigen(weighted_matrix)
eigens
eigens <- eigen(weighted_matrix)
eigen_values <- eigens[["values"]]
V_t <- eigens[["vectors"]][,1:reduce_rank] %>%
as.matrix(ncol = reduce_rank)
library(tidyverse)
V_t <- eigens[["vectors"]][,1:reduce_rank] %>%
as.matrix(ncol = reduce_rank)
reduced_rank = 5
V_t <- eigens[["vectors"]][,1:reduce_rank] %>%
as.matrix(ncol = reduce_rank)
reduce_rank = 5
V_t <- eigens[["vectors"]][,1:reduce_rank] %>%
as.matrix(ncol = reduce_rank)
A_t <- solve(sqrtm) %*% V_t
A_t
rownames(A_t) <- names(y)
B_t <- t(V_t) %*%
sqrtm %*%
cov_yx %*%
solve(cov_x)
C_t <- A_t %*% B_t
C_t
lm(y ~ x)
ndims = 5
x = matrix(rnorm(100 * ndims), nrow = 100, ncol = ndims)
y = matrix(rnorm(100 * ndims), nrow = 100, ncol = ndims)
gamma_matrix = diag(5)
rank = 2
sqrt_matrix <- function(matr){
eigens <- eigen(matr)
vecs <- eigens[["vectors"]]
vals <- eigens[["values"]]
vecs %*% diag(sqrt(vals)) %*% t(vecs)
}
k = 0
full_rank <- min(dim(x)[2], dim(y)[2])
if(rank == "full"){
reduce_rank <- full_rank
} else if(rank <= full_rank){
reduce_rank <- rank
} else {
stop("rank out of bounds")
}
rank = 5
sqrt_matrix <- function(matr){
eigens <- eigen(matr)
vecs <- eigens[["vectors"]]
vals <- eigens[["values"]]
vecs %*% diag(sqrt(vals)) %*% t(vecs)
}
full_rank <- min(dim(x)[2], dim(y)[2])
if(rank == "full"){
reduce_rank <- full_rank
} else if(rank <= full_rank){
reduce_rank <- rank
} else {
stop("rank out of bounds")
}
cov_x <- cov(x) + k * diag(1, dim(x)[2])
cov_yx <- cov(y, x)
cov_y <- cov(y) + k * diag(1, dim(y)[2])
cov_xy <- t(cov_yx)
gamma_matrix
sqrtm <- sqrt_matrix(gamma_matrix)
sqrtm
weighted_matrix <- sqrtm %*%
cov_yx %*%
solve(cov_x) %*%
cov_xy %*%
sqrtm
weighted_matrix
tmp <- cov_yx %*% solve(cov_x) %*% cov_xy
tmp
tmp - weighted_matrix
eigens <- eigen(weighted_matrix)
eigen_values <- eigens[["values"]]
eigens <- eigen(weighted_matrix)
eigens
eigen_values <- eigens[["values"]]
V_t <- eigens[["vectors"]][,1:reduce_rank] %>%
as.matrix(ncol = reduce_rank)
library(tidyverse)
V_t <- eigens[["vectors"]][,1:reduce_rank] %>%
as.matrix(ncol = reduce_rank)
V_t
eigens
solve(sqrtm)
A_t <- solve(sqrtm) %*% V_t
A_t
V_t
A_t - V_t
B_t <- t(V_t) %*%
sqrtm %*%
cov_yx %*%
solve(cov_x)
C_t <- A_t %*% B_t
C_t
lm(y ~ x)
mean(y[,1:100])
y
mean(y[1:100,])
ndims = 5
y = matrix(rnorm(100 * ndims), nrow = 100, ncol = ndims)
ceny = scale(y, center = TRUE, scale = FALSE)
ndims = 5
y = matrix(rnorm(100 * ndims), nrow = 100, ncol = ndims)
ceny = scale(y, center = TRUE, scale = FALSE)
y = embed(ceny, 2)[,1:5]
x = embed(ceny, 2)[,6:10]
gamma_matrix = diag(5)
rank = 5
sqrt_matrix <- function(matr){
eigens <- eigen(matr)
vecs <- eigens[["vectors"]]
vals <- eigens[["values"]]
vecs %*% diag(sqrt(vals)) %*% t(vecs)
}
reduce_rank_regression <- function(x, y, gamma_matrix, rank = "full", k = 0){
full_rank <- min(dim(x)[2], dim(y)[2])
if(rank == "full"){
reduce_rank <- full_rank
} else if(rank <= full_rank){
reduce_rank <- rank
} else {
stop("rank out of bounds")
}
cov_x <- cov(x) + k * diag(1, dim(x)[2])
cov_yx <- cov(y, x)
cov_y <- cov(y) + k * diag(1, dim(y)[2])
cov_xy <- t(cov_yx)
sqrtm <- sqrt_matrix(gamma_matrix)
weighted_matrix <- sqrtm %*%
cov_yx %*%
solve(cov_x) %*%
cov_xy %*%
sqrtm
eigens <- eigen(weighted_matrix)
eigen_values <- eigens[["values"]]
V_t <- eigens[["vectors"]][,1:reduce_rank] %>%
as.matrix(ncol = reduce_rank)
A_t <- solve(sqrtm) %*% V_t
rownames(A_t) <- names(y)
B_t <- t(V_t) %*%
sqrtm %*%
cov_yx %*%
solve(cov_x)
C_t <- A_t %*% B_t
mu_y <- colMeans(y)
mu_x <- colMeans(x)
mu_t <- mu_y - C_t %*% mu_x
list(mean = mu_t, A = A_t, B = B_t, C = C_t, eigen_values = eigen_values)
}
full_rank <- min(dim(x)[2], dim(y)[2])
if(rank == "full"){
reduce_rank <- full_rank
} else if(rank <= full_rank){
reduce_rank <- rank
} else {
stop("rank out of bounds")
}
cov_x <- cov(x) + k * diag(1, dim(x)[2])
k = 0
cov_x <- cov(x) + k * diag(1, dim(x)[2])
cov_yx <- cov(y, x)
cov_y <- cov(y) + k * diag(1, dim(y)[2])
cov_xy <- t(cov_yx)
sqrtm <- sqrt_matrix(gamma_matrix)
weighted_matrix <- sqrtm %*%
cov_yx %*%
solve(cov_x) %*%
cov_xy %*%
sqrtm
eigens <- eigen(weighted_matrix)
eigen_values <- eigens[["values"]]
V_t <- eigens[["vectors"]][,1:reduce_rank] %>%
as.matrix(ncol = reduce_rank)
A_t <- solve(sqrtm) %*% V_t
library(tidyverse)
V_t <- eigens[["vectors"]][,1:reduce_rank] %>%
as.matrix(ncol = reduce_rank)
A_t <- solve(sqrtm) %*% V_t
rownames(A_t) <- names(y)
B_t <- t(V_t) %*%
sqrtm %*%
cov_yx %*%
solve(cov_x)
C_t <- A_t %*% B_t
C_t
lm(y ~ x)
ndims = 5
y = matrix(rnorm(100 * ndims), nrow = 100, ncol = ndims)
y = embed(y, 2)[,1:5]
x = embed(y, 2)[,6:10]
y = scale(y, center = TRUE, scale = TRUE)
x = scale(x, center = TRUE, scale = TRUE)
gamma_matrix = diag(5)
rank = 5
sqrt_matrix <- function(matr){
eigens <- eigen(matr)
vecs <- eigens[["vectors"]]
vals <- eigens[["values"]]
vecs %*% diag(sqrt(vals)) %*% t(vecs)
}
full_rank <- min(dim(x)[2], dim(y)[2])
if(rank == "full"){
reduce_rank <- full_rank
} else if(rank <= full_rank){
reduce_rank <- rank
} else {
stop("rank out of bounds")
}
cov_x <- cov(x) + k * diag(1, dim(x)[2])
cov_yx <- cov(y, x)
cov_y <- cov(y) + k * diag(1, dim(y)[2])
k = 0
cov_x <- cov(x) + k * diag(1, dim(x)[2])
cov_yx <- cov(y, x)
cov_y <- cov(y) + k * diag(1, dim(y)[2])
cov_x <- cov(x) + k * diag(1, dim(x)[2])
cov_yx <- cov(y, x)
ndims = 5
y = matrix(rnorm(100 * ndims), nrow = 100, ncol = ndims)
y = embed(y, 2)[,1:5]
x = embed(y, 2)[,6:10]
ndims = 5
origy = matrix(rnorm(100 * ndims), nrow = 100, ncol = ndims)
y = embed(origy, 2)[,1:5]
x = embed(origy, 2)[,6:10]
y = scale(y, center = TRUE, scale = FALSE)
x = scale(x, center = TRUE, scale = FALSE)
gamma_matrix = diag(5)
rank = 5
k = 0
sqrt_matrix <- function(matr){
eigens <- eigen(matr)
vecs <- eigens[["vectors"]]
vals <- eigens[["values"]]
vecs %*% diag(sqrt(vals)) %*% t(vecs)
}
full_rank <- min(dim(x)[2], dim(y)[2])
if(rank == "full"){
reduce_rank <- full_rank
} else if(rank <= full_rank){
reduce_rank <- rank
} else {
stop("rank out of bounds")
}
cov_x <- cov(x) + k * diag(1, dim(x)[2])
cov_yx <- cov(y, x)
cov_y <- cov(y) + k * diag(1, dim(y)[2])
cov_xy <- t(cov_yx)
sqrtm <- sqrt_matrix(gamma_matrix)
weighted_matrix <- sqrtm %*%
cov_yx %*%
solve(cov_x) %*%
cov_xy %*%
sqrtm
eigens <- eigen(weighted_matrix)
eigen_values <- eigens[["values"]]
V_t <- eigens[["vectors"]][,1:reduce_rank] %>%
as.matrix(ncol = reduce_rank)
library(tidyverse)
V_t <- eigens[["vectors"]][,1:reduce_rank] %>%
as.matrix(ncol = reduce_rank)
A_t <- solve(sqrtm) %*% V_t
rownames(A_t) <- names(y)
B_t <- t(V_t) %*%
sqrtm %*%
cov_yx %*%
solve(cov_x)
C_t <- A_t %*% B_t
C_t
lm(y ~ X)
lm(y ~ x)
coef(lm(y~ (x-1)))
C_t
ndims = 5
origy = matrix(rnorm(100 * ndims), nrow = 100, ncol = ndims)
y = embed(origy, 2)[,1:5]
x = embed(origy, 2)[,6:10]
y = scale(y, center = TRUE, scale = FALSE)
x = scale(x, center = TRUE, scale = FALSE)
gamma_matrix = diag(5)
rank = 5
k = 0
sqrt_matrix <- function(matr){
eigens <- eigen(matr)
vecs <- eigens[["vectors"]]
vals <- eigens[["values"]]
vecs %*% diag(sqrt(vals)) %*% t(vecs)
}
full_rank <- min(dim(x)[2], dim(y)[2])
if(rank == "full"){
reduce_rank <- full_rank
} else if(rank <= full_rank){
reduce_rank <- rank
} else {
stop("rank out of bounds")
}
cov_x <- cov(x) + k * diag(1, dim(x)[2])
cov_yx <- cov(y, x)
cov_y <- cov(y) + k * diag(1, dim(y)[2])
cov_xy <- t(cov_yx)
sqrtm <- sqrt_matrix(gamma_matrix)
sqrtm
source("~/Desktop/Resources/Packages/rrr/R/reduce_rank_regression.R", echo=TRUE)
ndims = 5
origy = matrix(rnorm(100 * ndims), nrow = 100, ncol = ndims)
save(t(origy), file = "tmp.rda")
save(origy, file = "tmp.rda")
y = embed(origy, 2)[,1:5]
x = embed(origy, 2)[,6:10]
y = scale(y, center = TRUE, scale = FALSE)
x = scale(x, center = TRUE, scale = FALSE)
gamma_matrix = diag(5)
rank = 5
k = 0
sqrt_matrix <- function(matr){
eigens <- eigen(matr)
vecs <- eigens[["vectors"]]
vals <- eigens[["values"]]
vecs %*% diag(sqrt(vals)) %*% t(vecs)
}
full_rank <- min(dim(x)[2], dim(y)[2])
if(rank == "full"){
reduce_rank <- full_rank
} else if(rank <= full_rank){
reduce_rank <- rank
} else {
stop("rank out of bounds")
}
cov_x <- cov(x) + k * diag(1, dim(x)[2])
cov_x
cov_yx <- cov(y, x)
cov_yx
cov_y <- cov(y) + k * diag(1, dim(y)[2])
cov_xy <- t(cov_yx)
sqrtm <- sqrt_matrix(gamma_matrix)
weighted_matrix <- sqrtm %*%
cov_yx %*%
solve(cov_x) %*%
cov_xy %*%
sqrtm
weighted_matrix
eigens <- eigen(weighted_matrix)
eigen_values <- eigens[["values"]]
library(tidyverse)
V_t <- eigens[["vectors"]][,1:reduce_rank] %>%
as.matrix(ncol = reduce_rank)
V_t
weighted_matrix
weighted_matrix
V_t
eigen(weighted_matrix)
x
colMeans(x)
head(x)
cov_x
V_t
?eigen
weighted_matrix
setwd("~/Desktop/Projects/PHDYear1/TensorEconometrics/src/Regressions/")
load("tmp.rda")
y = embed(origy, 2)[,1:5]
x = embed(origy, 2)[,6:10]
y = scale(y, center = TRUE, scale = FALSE)
x = scale(x, center = TRUE, scale = FALSE)
gamma_matrix = diag(5)
rank = 5
k = 0
sqrt_matrix <- function(matr){
eigens <- eigen(matr)
vecs <- eigens[["vectors"]]
vals <- eigens[["values"]]
vecs %*% diag(sqrt(vals)) %*% t(vecs)
}
eigen(t(origy) %*% origy)
weighted_matrix
eigens
A_t <- solve(sqrtm) %*% V_t
A_t
rownames(A_t) <- names(y)
B_t <- t(V_t) %*%
sqrtm %*%
cov_yx %*%
solve(cov_x)
B_t
C_t
C_t <- A_t %*% B_t
C_t

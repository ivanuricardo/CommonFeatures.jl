var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = CommonFeatures","category":"page"},{"location":"#CommonFeatures","page":"Home","title":"CommonFeatures","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for CommonFeatures.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [CommonFeatures]","category":"page"},{"location":"#CommonFeatures.art","page":"Home","title":"CommonFeatures.art","text":"art(Y, p)\n\nCompute the Tensor Autoregressive (ART) model using tensor ordinary least squares.\n\nArguments\n\nY::AbstractArray: Matrix or Tensor of size (n1, n2, T) or (n1, n2, ..., nk, T).\np::Int: Order of the autoregressive model.\n\nReturns\n\nresult: Tensor of size (n1, n2, ..., nk, n1, ..., nk).\n\nExamples\n\nY = rand(3, 2, 100)\np = 2\n\nresult = art(Y, p)\n\n\n\n\n\n","category":"function"},{"location":"#CommonFeatures.fullinfocrit","page":"Home","title":"CommonFeatures.fullinfocrit","text":"fullinfocrit(mardata, p, r̄, maxiters, tucketa, ϵ, stdize)\n\nCalculate information criteria (aic and bic) for different combinations of Tucker ranks in a matrix autoregressive (MAR) model. Iterates over different time lags to find the best Tucker ranks.\n\nFields\n\nmardata::AbstractArray: The matrix-valued time series data.\npmax::Int: The maximum order of the autoregressive model to be considered.\nr̄::AbstractVector: A vector specifying the maximum Tucker ranks for each mode. Default is all possible combinations.\nmaxiters::Int: An integer specifying the number of iterations the Tucker regression should run. Default value is 500.\ntucketa::Real: A real value specifying the step size for the Tucker regression. Default value is 1e-02.\nϵ::Real: A real value specifying the convergence criterion for the Tucker regression. Default value is 1e-03.\nstdize::Bool: A boolean value specifying whether to standardize the data before running the Tucker regression. Default value is false.\n\nOutput\n\nA tuple with the following elements:\n\nbic: The Tucker ranks chosen based on the Bayesian Information Criterion (bic).\naic: The Tucker ranks chosen based on the Akaike Information Criterion (aic).\nictable: A 6xN matrix where N is the number of valid Tucker rank combinations. Each column corresponds to a combination, and rows contain the following information:\nRow 1: Log determinant of the covariance matrix plus a penalty term (bic criterion).\nRow 2: Log determinant of the covariance matrix plus a penalty term (aic criterion).\nRows 3-6: The chosen Tucker ranks for each mode.\nregiters: The number of iterations for each Tucker regression.\nnumconv: The number of converged Tucker regressions.\n\nExample\n\nmardata = randn(4,3,100)  # Example matrix time series data\np = 2\nr̄ = [2, 2, 2, 2]\nresult = infocrit(mardata, p, r̄)\nprintln(\"bic Chosen Ranks: \", result.bic)\nprintln(\"aic Chosen Ranks: \", result.aic)\nprintln(\"Information Criteria Table: \", result.ictable)\n\n\n\n\n\n","category":"function"},{"location":"#CommonFeatures.infocrit-Tuple{AbstractArray, Int64}","page":"Home","title":"CommonFeatures.infocrit","text":"infocrit(mardata, p, r̄, maxiters, tucketa, ϵ, stdize)\n\nCalculate information criteria (aic and bic) for different combinations of Tucker ranks in a matrix autoregressive (MAR) model.\n\nArguments\n\nmardata::AbstractArray: The matrix-valued time series data.\np::Int: The order of the autoregressive model.\nr̄::AbstractVector: A vector specifying the maximum Tucker ranks for each mode. Default is all possible combinations.\nmaxiters::Int: An integer specifying the number of iterations the Tucker regression should run. Default value is 500.\ntucketa::Real: A real value specifying the step size for the Tucker regression. Default value is 1e-02.\nϵ::Real: A real value specifying the convergence criterion for the Tucker regression. Default value is 1e-03.\nstdize::Bool: A boolean value specifying whether to standardize the data before running the Tucker regression. Default value is false.\n\nOutput\n\nA tuple with the following elements:\n\nbic: The Tucker ranks chosen based on the Bayesian Information Criterion (bic).\naic: The Tucker ranks chosen based on the Akaike Information Criterion (aic).\nictable: A 6xN matrix where N is the number of valid Tucker rank combinations. Each column corresponds to a combination, and rows contain the following information:\nRow 1: Log determinant of the covariance matrix plus a penalty term (bic criterion).\nRow 2: Log determinant of the covariance matrix plus a penalty term (aic criterion).\nRows 3-6: The chosen Tucker ranks for each mode.\nRow 7: The number of iterations for each Tucker regression.\nnumconv: The number of converged Tucker regressions.\n\nExample\n\nmardata = randn(4,3,100)  # Example matrix time series data\np = 2\nr̄ = [2, 2, 2, 2]\nresult = infocrit(mardata, p, r̄)\nprintln(\"bic Chosen Ranks: \", result.bic)\nprintln(\"aic Chosen Ranks: \", result.aic)\nprintln(\"Information Criteria Table: \", result.ictable)\n\n\n\n\n\n","category":"method"},{"location":"#CommonFeatures.isstable-Union{Tuple{AbstractMatrix{T}}, Tuple{T}} where T","page":"Home","title":"CommonFeatures.isstable","text":"isstable(var)\n\nCheck the stability of a VAR (Vector Autoregressive) model.\n\nThis function checks the stability of a VAR model by analyzing its companion matrix eigenvalues. A VAR model is considered stable if all the eigenvalues of its companion matrix are within the unit circle.\n\nArguments\n\nvar: Lag matrix in the form required for a VAR model. See the documentation of VAR.\n\nReturns\n\nBool: Returns true if the VAR model is stable, and false otherwise.\n\nExample\n\nB = [1.0 2.0;\n     3.0 4.0]\nvar_stable = isstable(B)  # Returns true or false based on the stability of the VAR model\n\nNote\n\nThe stability of a VAR model is determined by analyzing the eigenvalues of its companion matrix. The companion matrix is constructed using the makecompanion function.\n\nSee Also\n\nmakecompanion: Function to create the VAR companion matrix.\n\n\n\n\n\n","category":"method"},{"location":"#CommonFeatures.makecompanion-Union{Tuple{AbstractMatrix{T}}, Tuple{T}} where T","page":"Home","title":"CommonFeatures.makecompanion","text":"makecompanion(B::AbstractMatrix{T}) where {T}\n\nCreate the VAR companion matrix.\n\nGiven a VAR of the form yₜ = b₀ + B₁ yt-1 + … + Bₚyt-p + εₜ\n\nCreate the companion matrix. Thus, B is a np\times np matrix. \n\nArguments\n\n-B::AbstractMatrix{T}: Lag matrix in the form required for a VAR model. See     the documentation of VAR.\n\nReferences\n\nKilian, L., & Lütkepohl, H. (2017). Structural Vector Autoregressive Analysis: (1st ed.). Cambridge University Press. https://doi.org/10.1017/9781108164818\n\n\n\n\n\n","category":"method"},{"location":"#CommonFeatures.mecm2-Tuple{AbstractArray, AbstractVector}","page":"Home","title":"CommonFeatures.mecm2","text":"tuckercoint(mardata, ranks::AbstractVector, eta::Real, a=1, b=1, ϵ=1e-04, maxiter=1000, p=1,ϵ=1e-02)\n\nPerform a matrix autoregression with one lag (MAR(1)) with a reduced tucker rank along the coefficients. Uses the gradient descent algorithm of Wang, Zhang, and Li 2024.\n\nArguments\n\nmardata::AbstractArray: Input tensor data. Should be N1 \times N2 \times T\nranks::AbstractVector: Vector specifying the desired ranks of the Tucker decomposition.\neta::AbstractFloat: Learning rate for gradient descent (default: 1e-03).\na::Real: Regularization parameter (default: 1).\nb::Real: Regularization parameter (default: 1).\nmaxiter::Int: Maximum number of iterations for gradient descent (default: 3000).\np::Int: Number of lags to include\nϵ::AbstractFloat: Convergence threshold for stopping criteria (default: 1e-03).\n\nReturns\n\nA tuple containing the Tucker decomposition components:\n\nG: Core tensor.\nU1, U2, U3, U4: Factor matrices.\nA: Full Tucker decomposition tensor.\niters: Number of iterations performed.\nfullgrads: A matrix keeping track of gradients. Can be plotted to determine whether gradients behave properly.\n\n\n\n\n\n","category":"method"},{"location":"#CommonFeatures.ridgerankselect","page":"Home","title":"CommonFeatures.ridgerankselect","text":"ridgerankselect(est::AbstractArray, c::Real, r̄=collect(size(est)))::Vector{Int}\n\nUsed to provide an initial guess of the ranks for a Tucker regression using the framework of Lam and Yao (2011) and Wang et. al (2023). Given a four-dimensional initial estimate est (typically from the art function), this function performs ridge rank selection on each mode of the tensor using a ridge parameter c. The result is a vector of integers representing the selected ranks for each mode.\n\nArguments\n\nest::AbstractArray: The input four-dimensional array (tensor) for ridge rank selection.\nc::Real: Ridge parameter controlling regularization strength.\nr̄::Vector{Int} = collect(size(est)): Vector specifying the maximum ranks to consider for each mode. Default is the size of the corresponding mode in est.\n\nReturns\n\nVector{Int}: A vector containing the selected ranks for each mode of the input tensor.\n\nExample\n\nest = rand(3, 4, 5, 6)\nc = 0.1\nselected_ranks = ridgerankselect(est, c)\n\nReferences\n\nLam, Clifford, and Qiwei Yao. \"Factor modeling for high-dimensional time series: inference for the number of factors.\" The Annals of Statistics (2012): 694-726.\nWang, Di, et al. \"High-dimensional vector autoregressive time series modeling via tensor decomposition.\" Journal of the American Statistical Association 117.539 (2022): 1338-1356.\n\n\n\n\n\n","category":"function"},{"location":"#CommonFeatures.rrvar-Tuple{AbstractMatrix, Int64, Int64}","page":"Home","title":"CommonFeatures.rrvar","text":"rrvar(Y::AbstractMatrix, r::Int, p::Int)\n\nCompute reduced-rank vector autoregressive (RRVAR) model parameters.\n\nArguments\n\nY::AbstractMatrix: Input matrix with dimensions (k, T), where k is the number of variables and T is the number of observations.\nr::Int: Rank of the reduced-rank model.\np::Int: Order of the autoregressive model.\n\nReturns\n\nC::Matrix: Reduced-rank VAR coefficient matrix.\nA::Matrix: Left reduced-rank matrix.\nB::Matrix: Right reduced-rank matrix.\n\nDetails\n\nThis function computes the reduced-rank VAR parameters using the method.\n\n\n\n\n\n","category":"method"},{"location":"#CommonFeatures.rrvaric-Tuple{AbstractMatrix, Int64, Bool}","page":"Home","title":"CommonFeatures.rrvaric","text":"rrvaric(vardata, pmax, stdize)\n\nCompute the optimal rank of a reduced rank regression using information criteria.\n\nFields\n\nvardata::AbstractMatrix: The data matrix where each column represents a variable and each row represents an observation.\npmax::Int: The maximum lag order.\nstdize::Bool: Indicates whether to standardize the data or not.\n\nReturns\n\nA tuple with the following elements:\n\nbic: The optimal rank based on the Bayesian Information Criterion.\naic: The optimal rank based on the Akaike Information Criterion.\nhqc: The optimal rank based on the Hannan-Quinn Information Criterion.\nictable: A 5xN matrix where N is the number of valid rank combinations. Each column corresponds to a combination, and rows contain the following information:\nRow 1: Log determinant of the covariance matrix plus a penalty term (bic criterion).\nRow 2: Log determinant of the covariance matrix plus a penalty term (aic criterion).\nRow 3: Log determinant of the covariance matrix plus a penalty term (hqc criterion).\nRow 4: The chosen rank.\nRow 5: The chosen lag order.\n\n\n\n\n\n","category":"method"},{"location":"#CommonFeatures.simstats-Tuple{AbstractMatrix, AbstractVector, Int64}","page":"Home","title":"CommonFeatures.simstats","text":"simstats(selectedranks, correctrank, sims)\n\nCalculate simulation statistics based on selected ranks, correct ranks, and the number of simulations.\n\nArguments\n\nselectedranks::AbstractMatrix: Matrix of selected ranks for each simulation. Simulations should be along the rows.\ncorrectrank::AbstractVector: Vector of correct ranks for each simulation.\nsims::Int: CNumber of simulations.\n\nReturns\n\nA named tuple containing the following statistics:\n\navgrank: Average rank for each simulation.\nstdrank: Standard deviation of ranks for each simulation.\nfreqcorrect: Frequency of correct ranks for each simulation.\nfreqhigh: Frequency of ranks higher than the correct rank for each simulation.\nfreqlow: Frequency of ranks lower than the correct rank for each simulation.\n\n\n\n\n\n","category":"method"},{"location":"#CommonFeatures.simulatetuckerdata-Tuple{AbstractVector, AbstractVector, Int64}","page":"Home","title":"CommonFeatures.simulatetuckerdata","text":"simulatetuckerdata(dimvals, ranks, obs, scale)\n\nSimulate Tucker data with specified dimensions, ranks, observation count, and scaling factor.\n\nArguments\n\ndimvals::AbstractVector: Dimensions of the tensor (dimvals[1] for the first mode, dimvals[2] for the second mode).\nranks::AbstractVector: Tucker ranks for the four modes.\nobs::Int: Number of observations to simulate.\nA::Array{Float64, 4}: Coefficient tensor. If nothing, a random coefficient tensor will be generated.\np::Int: Number of lags to include. Default is 1 and the maximum is 5.\nsnr::Real: Desired signal-to-noise ratio. Default is 0.7.\n\nReturns\n\nA named tuple containing:\n\ndata::Array{Float64, 3}: Simulated Tucker data with dimensions (dimvals[1], dimvals[2], obs).\nA::Array{Float64, 4}: Chosen coefficient tensor.\nΣ::Array{Float64, 2}: Covariance matrix of the noise.\n\nExamples\n\nresult = simulatetuckerdata([5, 4], [2, 3, 2, 3], 100, 1.0)\n\n\n\n\n\n","category":"method"},{"location":"#CommonFeatures.tensorols-Tuple{AbstractArray, AbstractArray}","page":"Home","title":"CommonFeatures.tensorols","text":"tensorols(Y, X)\n\nCompute tensor ordinary least squares equation by equation.\n\nArguments\n\nY::AbstractArray: Tensor of size (n1, n2, ..., nk, T).\nX::AbstractArray: Tensor of size (p1, p2, ..., pk, T).\n\nReturns\n\nresult: Tensor of size (n1, n2, ..., nk, p1, p2, ..., pk).\n\n\n\n\n\n","category":"method"},{"location":"#CommonFeatures.tlag","page":"Home","title":"CommonFeatures.tlag","text":"tlag(ten_data::AbstractArray, p=1)\n\nCreate lagged arrays from a tensor-valued time series of the form N₁ × N₂ × … × Nₖ × T. New lagged is a tensor of size N1 × N2 × … × N_k × p × T.\n\nArguments:\n\nten_data: A tensor-valued time series with dimensions N₁ × N₂ × … × Nₖ × T, where N₁, N₂, ..., Nₖ represent the spatial dimensions, and T represents the time dimension.\np: The number of lags to be created. Default is 1, indicating a single lag.\n\nReturns:\n\noriginal: The original tensor without any lag.\nlagged: A tensor containing lagged versions of the original tensor, with dimensions N₁ × N₂ × … × Nₖ × p × T, where lastdim is the size of the last dimension of the input tensor.\n\nExample:\n\ndata = randn(3, 4, 5, 10)  # Example tensor with dimensions 3 × 4 × 5 × 10\noriginal, lagged = tlag(data, 2)  # Create lagged arrays with 2 lags\n\n\n\n\n\n","category":"function"},{"location":"#CommonFeatures.tuckerpar","page":"Home","title":"CommonFeatures.tuckerpar","text":"tuckerpar(dimvals::AbstractVector, ranks::AbstractVector, P::Integer=1)\n\nCompute the Tucker compression parameter for a tensor with specified dimensions and Tucker ranks.\n\nArguments\n\ndimvals::AbstractVector: A vector representing the dimensions of the original tensor.\nranks::AbstractVector: A vector representing the Tucker ranks for compression. It should have twice the length of dimvals.\nP::Integer=1: An optional parameter representing the mode-n unfolding size (default is 1).\n\nOutput\n\nReturns the Tucker compression parameter for the given input.\n\nExamples\n\ndimvals = [3, 4, 5]\nranks = [2, 3, 2, 4]\nP = 2\nresult = tuckerpar(dimvals, ranks, P)\nprintln(result)  # Output: 44\n\nReferences\n\nTucker, L. R. (1966). Some mathematical notes on three-mode factor analysis. Psychometrika, 31(3), 279-311.\n\n\n\n\n\n","category":"function"},{"location":"#CommonFeatures.tuckerreg-Tuple{AbstractArray, AbstractVector}","page":"Home","title":"CommonFeatures.tuckerreg","text":"tuckerreg(mardata, ranks::AbstractVector, eta::Real, a=1, b=1, ϵ=1e-04, maxiter=1000, p=1,ϵ=1e-02)\n\nPerform a matrix autoregression with one lag (MAR(1)) with a reduced tucker rank along the coefficients. Uses the gradient descent algorithm of Wang, Zhang, and Li 2024.\n\nArguments\n\nmardata::AbstractArray: Input tensor data. Should be N1 \times N2 \times T\nranks::AbstractVector: Vector specifying the desired ranks of the Tucker decomposition.\neta::AbstractFloat: Learning rate for gradient descent (default: 1e-03).\na::Real: Regularization parameter (default: 1).\nb::Real: Regularization parameter (default: 1).\nmaxiter::Int: Maximum number of iterations for gradient descent (default: 3000).\np::Int: Number of lags to include\nϵ::AbstractFloat: Convergence threshold for stopping criteria (default: 1e-03).\n\nReturns\n\nA tuple containing the Tucker decomposition components:\n\nG: Core tensor.\nU1, U2, U3, U4: Factor matrices.\nA: Full Tucker decomposition tensor.\niters: Number of iterations performed.\nfullgrads: A matrix keeping track of gradients. Can be plotted to determine whether gradients behave properly.\n\n\n\n\n\n","category":"method"}]
}
